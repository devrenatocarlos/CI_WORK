apply plugin: 'com.android.application'

apply plugin: 'kotlin-android'

apply plugin: 'kotlin-android-extensions'

apply plugin: 'jacoco'

apply plugin: 'com.github.kt3k.coveralls'

android {
    compileSdkVersion 29
    buildToolsVersion "29.0.2"
    defaultConfig {
        applicationId "cesar.devapps.finalproject"
        minSdkVersion 26
        targetSdkVersion 29
        versionCode 1
        versionName "1.0"
        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
    }
    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }
        debug {
            testCoverageEnabled true
        }
    }
}

jacoco {
    toolVersion = "0.8.5"
    reportsDir = file("$buildDir/customJacocoReportDir")
}

tasks.withType(Test) {
    jacoco.includeNoLocationClasses = true
}

task('jacocoReports') {
    group = "Reporting"
    description = "Generate Jacoco coverage reports for all variants"
}

variants().all { variant ->
    def variantName = variant.name
    def variantCapName = variant.name.capitalize()
    if (!variantCapName.contains("Debug")) {
        return
    }
    def variantTask = task(
            "jacoco${variantCapName}Report",
            type: JacocoReport,
            dependsOn: [
                    "test${variantCapName}UnitTest"
            ]) {
        group = "Reporting"
        description = "Generate Jacoco coverage reports for $variantCapName"
        reports {
            xml.enabled = true // coveralls plugin depends on xml format report
            html.enabled = true
        }
        def fileFilter = [ '**/R.class',
                           '**/R$*.class',
                           '**/BuildConfig.*',
                           '**/Manifest*.*',
                           '**/*Test*.*',
                           '**/injectors/**/*.*',
                           'android/**/*.*',
                           'androidx/**/*.*',
                           'com/**/*.*',
                           'io/**/*.*',
                           '**/ui/**/*.*'
        ]
        def classTree = fileTree(
                dir: variant.javaCompiler.destinationDir,
                excludes: fileFilter
        ) + fileTree(
                dir: "$buildDir/tmp/kotlin-classes/$variantName",
                excludes: fileFilter
        )

        sourceDirectories = files([
                "src/main/java", "src/main/kotlin",
                "src/$variantName/java", "src/$variantName/kotlin"
        ])
        classDirectories = files([classTree])
        executionData = fileTree(dir: "$buildDir", includes: [
                "jacoco/test${variantCapName}UnitTest.exec",
                "jacoco/junitPlatformTest${variantCapName}.exec",
                "outputs/code-coverage/connected/flavors/**/*coverage.ec"
        ])
    }
    jacocoReports.dependsOn variantTask
}

check.dependsOn jacocoReports

def variants() {
    if (project.android.hasProperty('libraryVariants')) {
        return project.android.libraryVariants
    } else {
        return project.android.applicationVariants
    }
}

coveralls {
    jacocoReportPath = "$buildDir/reports/jacoco/jacocoProdDebugReport/jacocoProdDebugReport.xml"
}
//task jacocoTestReport(type: JacocoReport, dependsOn: 'testDebugUnitTest') {
//
//    reports {
//        xml.enabled = true
//        html.enabled = true
//    }
//
//    def fileFilter = ['**/R.class', '**/R$*.class', '**/BuildConfig.*', '**/Manifest*.*', '**/*Test*.*', 'android/**/*.*']
//    def debugTree = fileTree(dir: "${buildDir}/intermediates/classes/debug", excludes: fileFilter)
//    def mainSrc = "${project.projectDir}/src/main/java"
//
//    sourceDirectories = files([mainSrc])
//    classDirectories = files([debugTree])
//    executionData = files("${buildDir}/jacoco/testDebugUnitTest.exec")
//}

dependencies {
    implementation fileTree(dir: 'libs', include: ['*.jar'])
    implementation "org.jetbrains.kotlin:kotlin-stdlib-jdk7:$kotlin_version"
    implementation 'androidx.appcompat:appcompat:1.0.2'
    implementation 'androidx.core:core-ktx:1.0.2'
    implementation 'androidx.constraintlayout:constraintlayout:1.1.3'
    implementation 'androidx.recyclerview:recyclerview:1.0.0'
    implementation 'com.google.android.gms:play-services-maps:16.1.0'

    implementation 'android.arch.work:work-runtime:1.0.0'

    testImplementation 'junit:junit:4.12'
    androidTestImplementation 'androidx.test.ext:junit:1.1.0'
    androidTestImplementation 'androidx.test.espresso:espresso-core:3.1.1'
    implementation 'com.google.android.material:material:1.0.0'
    implementation 'com.mobsandgeeks:android-saripaar:2.0.3'
}
